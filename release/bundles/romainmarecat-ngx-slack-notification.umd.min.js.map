{"version":3,"sources":["ng://@romainmarecat/ngx-slack-notification/mock-slack-notification.service.ts","ng://@romainmarecat/ngx-slack-notification/slack-notification.service.ts","ng://@romainmarecat/ngx-slack-notification/slack.module.ts"],"names":["MockSlackNotificationService","prototype","notify","sendNotification","of","SlackNotificationService","message","headers","HttpHeaders","set","this","http","post","slackUrl","responseType","slackMessage","JSON","stringify","subscribe","Injectable","args","providedIn","HttpClient","Inject","SLACK_URL_TOKEN","InjectionToken","createNotificationFactory","httpClient","SlackModule","forRoot","ngModule","providers","provide","useFactory","deps","useValue","NgModule","imports","CommonModule","FormsModule","HttpClientModule"],"mappings":"0jBAAA,IAAAA,GAGEA,EAAAC,UAAAC,OAAA,aAGAF,EAAAC,UAAAE,iBAAA,WACE,OAAOC,EAAAA,GAAG,OAEdJ,GAPA,SAAAA,KCFA,IAAAK,GAsBEA,EAAAJ,UAAAE,iBAAA,SAAiBG,OACTC,GAAU,IAAIC,EAAAA,aACjBC,IAAI,eAAgB,oDAEvB,OAAOC,KAAKC,KACTC,KACCF,KAAKG,SACLP,EACA,CACEC,QAASA,EACTO,aAAc,UAQtBT,EAAAJ,UAAAC,OAAA,SAAOa,OACCT,EAAU,WAAWU,KAAKC,UAAUF,GAE1CL,KAAKP,iBAAiBG,GAASY,iCAtClCC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDANLC,EAAAA,2CAWMC,EAAAA,OAAMH,KAAA,CAAC,oKADpB,SAAAf,EAAoBM,EACoBE,GADpBH,KAAAC,KAAAA,EACoBD,KAAAG,SAAAA,ECL1C,IAAaW,EAAkB,IAAIC,EAAAA,eAAuB,YAE1D,SAAgBC,EAA0BC,EAAwBd,GAChE,OAAO,IAAIR,EAAyBsB,EAAYd,GAGlD,IAAAe,GAYSA,EAAAC,QAAP,SAAehB,GACb,MAAO,CACLiB,SAAUF,EACVG,UAAW,CAAC,CACVC,QAAS3B,EACT4B,WAAYP,EACZQ,KAAM,CAACZ,EAAAA,WAAYE,IAEnB,CAACQ,QAASR,EAAiBW,SAAUtB,0BApB5CuB,EAAAA,SAAQhB,KAAA,CAAC,CACRiB,QAAS,CACPC,EAAAA,aACAC,EAAAA,YACAC,EAAAA,sBAoBJZ,GAxBA,SAAAA","sourcesContent":["import { Observable, of } from 'rxjs';\n\nexport class MockSlackNotificationService {\n  notify(): void {\n  }\n\n  sendNotification(): Observable<string> {\n    return of('ok');\n  }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SlackMessage } from './slack-message';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SlackNotificationService {\n\n  constructor(private http: HttpClient,\n              @Inject('slackUrl') private slackUrl: string) {\n  }\n\n  /**\n   * Send notification to slack\n   *\n   * you could subscribe directly on this Observable\n   *\n   * returns 200 with message \"ok\" if success\n   * throw HttpErrorResponse 400\n   */\n  sendNotification(message: string): Observable<string> {\n    const headers = new HttpHeaders()\n      .set('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n\n    return this.http\n      .post(\n        this.slackUrl,\n        message,\n        {\n          headers: headers,\n          responseType: 'text'\n        }\n      );\n  }\n\n  /**\n   * Main function to send notification to slack\n   */\n  notify(slackMessage: SlackMessage): void {\n    const message = `payload=${JSON.stringify(slackMessage)}`;\n\n    this.sendNotification(message).subscribe();\n  }\n}\n","import { InjectionToken, NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HttpClientModule, HttpClient } from '@angular/common/http';\nimport { FormsModule } from '@angular/forms';\nimport { SlackNotificationService } from './slack-notification.service';\n\nexport const SLACK_URL_TOKEN = new InjectionToken<string>('slackUrl');\n\nexport function createNotificationFactory(httpClient: HttpClient, slackUrl: string) {\n  return new SlackNotificationService(httpClient, slackUrl);\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    HttpClientModule,\n  ]\n})\nexport class SlackModule {\n\n  /**\n   * Initialize SlackModule\n   */\n  static forRoot(slackUrl: string) {\n    return {\n      ngModule: SlackModule,\n      providers: [{\n        provide: SlackNotificationService,\n        useFactory: createNotificationFactory,\n        deps: [HttpClient, SLACK_URL_TOKEN]\n      },\n        {provide: SLACK_URL_TOKEN, useValue: slackUrl},\n      ]\n    };\n  }\n}\n"]}