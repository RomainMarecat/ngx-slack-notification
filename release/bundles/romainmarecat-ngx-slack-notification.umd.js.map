{"version":3,"file":"romainmarecat-ngx-slack-notification.umd.js.map","sources":["ng://@romainmarecat/ngx-slack-notification/mock-slack-notification.service.ts","ng://@romainmarecat/ngx-slack-notification/slack-notification.service.ts","ng://@romainmarecat/ngx-slack-notification/slack.module.ts"],"sourcesContent":["import { Observable, of } from 'rxjs';\n\nexport class MockSlackNotificationService {\n  /**\n   * Mock void function\n   */\n  notify(): void {\n  }\n\n  /**\n   * Mock an Observable of success callback\n   */\n  sendNotification(): Observable<string> {\n    return of('ok');\n  }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SlackMessage } from './slack-message';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SlackNotificationService {\n\n  constructor(private http: HttpClient,\n              @Inject('slackUrl') private slackUrl: string) {\n  }\n\n  /**\n   * Send notification to slack\n   *\n   * you could subscribe directly on this Observable\n   *\n   * returns 200 with message \"ok\" if success\n   * throw HttpErrorResponse 400\n   */\n  sendNotification(message: string): Observable<string> {\n    // Add custom header and charset UTF-8\n    const headers = new HttpHeaders()\n      .set('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n\n    return this.http\n      .post(\n        this.slackUrl,\n        message,\n        {\n          headers: headers,\n          responseType: 'text'\n        }\n      );\n  }\n\n  /**\n   * Main function to send notification to slack\n   */\n  notify(slackMessage: SlackMessage): void {\n    const message = `payload=${JSON.stringify(slackMessage)}`;\n\n    this.sendNotification(message).subscribe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClient, HttpClientModule } from '@angular/common/http';\nimport { InjectionToken, NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { SlackNotificationService } from './slack-notification.service';\n\n// Injection Token URL\nexport const SLACK_URL_TOKEN = new InjectionToken<string>('slackUrl');\n\n// AOT factory function\nexport function createNotificationFactory(httpClient: HttpClient, slackUrl: string) {\n  return new SlackNotificationService(httpClient, slackUrl);\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    HttpClientModule,\n  ]\n})\nexport class SlackModule {\n\n  /**\n   * Initialize SlackModule\n   */\n  static forRoot(slackUrl: string) {\n    return {\n      ngModule: SlackModule,\n      providers: [{\n        provide: SlackNotificationService,\n        useFactory: createNotificationFactory,\n        deps: [HttpClient, SLACK_URL_TOKEN]\n      },\n        {provide: SLACK_URL_TOKEN, useValue: slackUrl},\n      ]\n    };\n  }\n}\n"],"names":["of","HttpHeaders","Injectable","HttpClient","Inject","InjectionToken","NgModule","CommonModule","FormsModule","HttpClientModule"],"mappings":";;;;;;;;;;AAAA;QAEA;SAaC;;;;;;;;QATC,6CAAM;;;;YAAN;aACC;;;;;;;;QAKD,uDAAgB;;;;YAAhB;gBACE,OAAOA,OAAE,CAAC,IAAI,CAAC,CAAC;aACjB;QACH,mCAAC;IAAD,CAAC;;;;;;ACfD;QAUE,kCAAoB,IAAgB,EACI,QAAgB;YADpC,SAAI,GAAJ,IAAI,CAAY;YACI,aAAQ,GAAR,QAAQ,CAAQ;SACvD;;;;;;;;;;;;;;;;;;;QAUD,mDAAgB;;;;;;;;;;YAAhB,UAAiB,OAAe;;;oBAExB,OAAO,GAAG,IAAIC,cAAW,EAAE;qBAC9B,GAAG,CAAC,cAAc,EAAE,kDAAkD,CAAC;gBAE1E,OAAO,IAAI,CAAC,IAAI;qBACb,IAAI,CACH,IAAI,CAAC,QAAQ,EACb,OAAO,EACP;oBACE,OAAO,EAAE,OAAO;oBAChB,YAAY,EAAE,MAAM;iBACrB,CACF,CAAC;aACL;;;;;;;;;QAKD,yCAAM;;;;;YAAN,UAAO,YAA0B;;oBACzB,OAAO,GAAG,aAAW,IAAI,CAAC,SAAS,CAAC,YAAY,CAAG;gBAEzD,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,SAAS,EAAE,CAAC;aAC5C;;oBAxCFC,aAAU,SAAC;wBACV,UAAU,EAAE,MAAM;qBACnB;;;;;wBAPQC,aAAU;qDAWJC,SAAM,SAAC,UAAU;;;;uCAXhC;KAKA;;;;;;ACLA;;AAOA,QAAa,eAAe,GAAG,IAAIC,iBAAc,CAAS,UAAU,CAAC;;;;;;;AAGrE,aAAgB,yBAAyB,CAAC,UAAsB,EAAE,QAAgB;QAChF,OAAO,IAAI,wBAAwB,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;IAC5D,CAAC;AAED;QAAA;SAwBC;;;;;;;;;QAZQ,mBAAO;;;;;YAAd,UAAe,QAAgB;gBAC7B,OAAO;oBACL,QAAQ,EAAE,WAAW;oBACrB,SAAS,EAAE,CAAC;4BACV,OAAO,EAAE,wBAAwB;4BACjC,UAAU,EAAE,yBAAyB;4BACrC,IAAI,EAAE,CAACF,aAAU,EAAE,eAAe,CAAC;yBACpC;wBACC,EAAC,OAAO,EAAE,eAAe,EAAE,QAAQ,EAAE,QAAQ,EAAC;qBAC/C;iBACF,CAAC;aACH;;oBAvBFG,WAAQ,SAAC;wBACR,OAAO,EAAE;4BACPC,mBAAY;4BACZC,iBAAW;4BACXC,mBAAgB;yBACjB;qBACF;;QAkBD,kBAAC;KAxBD;;;;;;;;;;;;;;;;;;;;;"}
