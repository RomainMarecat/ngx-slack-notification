{"version":3,"file":"romainmarecat-ngx-slack-notification.js.map","sources":["ng://@romainmarecat/ngx-slack-notification/mock-slack-notification.service.ts","ng://@romainmarecat/ngx-slack-notification/slack-notification.service.ts","ng://@romainmarecat/ngx-slack-notification/slack.module.ts"],"sourcesContent":["import { Observable, of } from 'rxjs';\n\nexport class MockSlackNotificationService {\n  /**\n   * Mock void function\n   */\n  notify(): void {\n  }\n\n  /**\n   * Mock an Observable of success callback\n   */\n  sendNotification(): Observable<string> {\n    return of('ok');\n  }\n}\n","import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Inject, Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { SlackMessage } from './slack-message';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SlackNotificationService {\n\n  constructor(private http: HttpClient,\n              @Inject('slackUrl') private slackUrl: string) {\n  }\n\n  /**\n   * Send notification to slack\n   *\n   * you could subscribe directly on this Observable\n   *\n   * returns 200 with message \"ok\" if success\n   * throw HttpErrorResponse 400\n   */\n  sendNotification(message: string): Observable<string> {\n    // Add custom header and charset UTF-8\n    const headers = new HttpHeaders()\n      .set('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8');\n\n    return this.http\n      .post(\n        this.slackUrl,\n        message,\n        {\n          headers: headers,\n          responseType: 'text'\n        }\n      );\n  }\n\n  /**\n   * Main function to send notification to slack\n   */\n  notify(slackMessage: SlackMessage): void {\n    const message = `payload=${JSON.stringify(slackMessage)}`;\n\n    this.sendNotification(message).subscribe();\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { HttpClient, HttpClientModule } from '@angular/common/http';\nimport { InjectionToken, NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { SlackNotificationService } from './slack-notification.service';\n\n// Injection Token URL\nexport const SLACK_URL_TOKEN = new InjectionToken<string>('slackUrl');\n\n// AOT factory function\nexport function createNotificationFactory(httpClient: HttpClient, slackUrl: string) {\n  return new SlackNotificationService(httpClient, slackUrl);\n}\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    HttpClientModule,\n  ]\n})\nexport class SlackModule {\n\n  /**\n   * Initialize SlackModule\n   */\n  static forRoot(slackUrl: string) {\n    return {\n      ngModule: SlackModule,\n      providers: [{\n        provide: SlackNotificationService,\n        useFactory: createNotificationFactory,\n        deps: [HttpClient, SLACK_URL_TOKEN]\n      },\n        {provide: SLACK_URL_TOKEN, useValue: slackUrl},\n      ]\n    };\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;AAAA;IAEA;KAaC;;;;;;;;IATC,6CAAM;;;;IAAN;KACC;;;;;;;;IAKD,uDAAgB;;;;IAAhB;QACE,OAAO,EAAE,CAAC,IAAI,CAAC,CAAC;KACjB;IACH,mCAAC;CAAA;;;;;;ACfD;IAUE,kCAAoB,IAAgB,EACI,QAAgB;QADpC,SAAI,GAAJ,IAAI,CAAY;QACI,aAAQ,GAAR,QAAQ,CAAQ;KACvD;;;;;;;;;;;;;;;;;;;IAUD,mDAAgB;;;;;;;;;;IAAhB,UAAiB,OAAe;;;YAExB,OAAO,GAAG,IAAI,WAAW,EAAE;aAC9B,GAAG,CAAC,cAAc,EAAE,kDAAkD,CAAC;QAE1E,OAAO,IAAI,CAAC,IAAI;aACb,IAAI,CACH,IAAI,CAAC,QAAQ,EACb,OAAO,EACP;YACE,OAAO,EAAE,OAAO;YAChB,YAAY,EAAE,MAAM;SACrB,CACF,CAAC;KACL;;;;;;;;;IAKD,yCAAM;;;;;IAAN,UAAO,YAA0B;;YACzB,OAAO,GAAG,aAAW,IAAI,CAAC,SAAS,CAAC,YAAY,CAAG;QAEzD,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,SAAS,EAAE,CAAC;KAC5C;;gBAxCF,UAAU,SAAC;oBACV,UAAU,EAAE,MAAM;iBACnB;;;;gBAPQ,UAAU;6CAWJ,MAAM,SAAC,UAAU;;;mCAXhC;CAKA;;;;;;ACLA;;AAOA,IAAa,eAAe,GAAG,IAAI,cAAc,CAAS,UAAU,CAAC;;;;;;;AAGrE,SAAgB,yBAAyB,CAAC,UAAsB,EAAE,QAAgB;IAChF,OAAO,IAAI,wBAAwB,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAC;CAC3D;AAED;IAAA;KAwBC;;;;;;;;;IAZQ,mBAAO;;;;;IAAd,UAAe,QAAgB;QAC7B,OAAO;YACL,QAAQ,EAAE,WAAW;YACrB,SAAS,EAAE,CAAC;oBACV,OAAO,EAAE,wBAAwB;oBACjC,UAAU,EAAE,yBAAyB;oBACrC,IAAI,EAAE,CAAC,UAAU,EAAE,eAAe,CAAC;iBACpC;gBACC,EAAC,OAAO,EAAE,eAAe,EAAE,QAAQ,EAAE,QAAQ,EAAC;aAC/C;SACF,CAAC;KACH;;gBAvBF,QAAQ,SAAC;oBACR,OAAO,EAAE;wBACP,YAAY;wBACZ,WAAW;wBACX,gBAAgB;qBACjB;iBACF;;IAkBD,kBAAC;CAxBD;;;;;;;;;;;;;;"}
